<script lang="ts">
  import { onMount } from 'svelte';
  import * as d3 from 'd3';
  
  export let graphData = { nodes: [], edges: [] };
  export let width = 800;
  export let height = 600;
  
  let svg: SVGSVGElement;
  let simulation: any;
  
  onMount(() => {
    if (!graphData.nodes.length) return;
    
    // Create SVG
    const svgElement = d3.select(svg)
      .attr('width', width)
      .attr('height', height);
    
    // Clear previous content
    svgElement.selectAll('*').remove();
    
    // Create container for zoom
    const container = svgElement.append('g');
    
    // Add zoom behavior
    const zoom = d3.zoom()
      .scaleExtent([0.1, 10])
      .on('zoom', (event) => {
        container.attr('transform', event.transform);
      });
    
    svgElement.call(zoom);
    
    // Create force simulation
    simulation = d3.forceSimulation(graphData.nodes)
      .force('link', d3.forceLink(graphData.edges)
        .id(d => d.id)
        .distance(100))
      .force('charge', d3.forceManyBody().strength(-300))
      .force('center', d3.forceCenter(width / 2, height / 2))
      .force('collision', d3.forceCollide().radius(30));
    
    // Create links
    const link = container.append('g')
      .attr('class', 'links')
      .selectAll('line')
      .data(graphData.edges)
      .enter().append('line')
      .attr('stroke', '#999')
      .attr('stroke-opacity', 0.6)
      .attr('stroke-width', d => d.type === 'subject_of' ? 3 : 2);
    
    // Create link labels
    const linkLabel = container.append('g')
      .attr('class', 'link-labels')
      .selectAll('text')
      .data(graphData.edges)
      .enter().append('text')
      .attr('font-size', 10)
      .attr('fill', '#666')
      .text(d => d.type);
    
    // Create nodes
    const node = container.append('g')
      .attr('class', 'nodes')
      .selectAll('g')
      .data(graphData.nodes)
      .enter().append('g')
      .call(d3.drag()
        .on('start', dragstarted)
        .on('drag', dragged)
        .on('end', dragended));
    
    // Add circles to nodes
    node.append('circle')
      .attr('r', d => Math.sqrt(d.relationships_count || 1) * 5 + 10)
      .attr('fill', d => {
        if (d.method?.includes('yake')) return '#4CAF50';
        if (d.method?.includes('spacy')) return '#2196F3';
        if (d.method?.includes('svo')) return '#FF9800';
        return '#9C27B0';
      })
      .attr('stroke', '#fff')
      .attr('stroke-width', 2);
    
    // Add labels to nodes
    node.append('text')
      .text(d => d.label)
      .attr('x', 0)
      .attr('y', 5)
      .attr('text-anchor', 'middle')
      .attr('font-size', 12)
      .attr('font-weight', 'bold')
      .attr('fill', '#333');
    
    // Add tooltips
    node.append('title')
      .text(d => `${d.label}\nScore: ${d.score?.toFixed(3) || 'N/A'}\nMethod: ${d.method || 'unknown'}\nRelationships: ${d.relationships_count || 0}`);
    
    // Update positions on tick
    simulation.on('tick', () => {
      link
        .attr('x1', d => d.source.x)
        .attr('y1', d => d.source.y)
        .attr('x2', d => d.target.x)
        .attr('y2', d => d.target.y);
      
      linkLabel
        .attr('x', d => (d.source.x + d.target.x) / 2)
        .attr('y', d => (d.source.y + d.target.y) / 2);
      
      node.attr('transform', d => `translate(${d.x},${d.y})`);
    });
    
    // Drag functions
    function dragstarted(event, d) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }
    
    function dragged(event, d) {
      d.fx = event.x;
      d.fy = event.y;
    }
    
    function dragended(event, d) {
      if (!event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
    
    return () => {
      if (simulation) simulation.stop();
    };
  });
  
  // Load graph data
  onMount(async () => {
    try {
      const response = await fetch('/api/concept-graph');
      if (response.ok) {
        graphData = await response.json();
      }
    } catch (error) {
      console.error('Failed to load graph data:', error);
    }
  });
</script>

<div class="graph-container">
  <svg bind:this={svg}></svg>
</div>

<style>
  .graph-container {
    width: 100%;
    height: 100%;
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
    background: #f9f9f9;
  }
  
  :global(.nodes text) {
    pointer-events: none;
    user-select: none;
  }
  
  :global(.links line) {
    cursor: pointer;
  }
  
  :global(.link-labels text) {
    pointer-events: none;
    user-select: none;
  }
</style>
